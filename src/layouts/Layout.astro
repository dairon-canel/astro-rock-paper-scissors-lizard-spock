---
import Rules from '../components/Rules.astro';
import ScoreHeader from '../components/ScoreHeader.astro';

export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="./images/favicon-32x32.png"
    />

    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body class="relative flex flex-col h-screen">
    <ScoreHeader class="m-7" />
    <slot />
    <button
      id="rules-button"
      class="text-white border-2 pt-[0.4rem] pb-[0.3rem] border-header-outline uppercase self-center mb-[3.1rem] rounded-lg tracking-[0.06rem] px-[2rem]"
      >Rules</button
    >
    <div id="rules-section" class="bg-white absolute w-full h-full hidden">
      <Rules />
      <button id="close-button" class="w-10 h-10"></button>
    </div>
  </body>
</html>
<style is:global>
  @font-face {
    font-family: 'BarlowSemiCondensed-Bold';
    src: url(/fonts/BarlowSemiCondensed-Bold.ttf);
  }

  @font-face {
    font-family: 'BarlowSemiCondensed-SemiBold';
    src: url(/fonts/BarlowSemiCondensed-SemiBold.ttf);
  }
  /* css reset from https://www.joshwcomeau.com/css/custom-css-reset/ */

  /*
  1. Use a more-intuitive box-sizing model.
*/
  *,
  *::before,
  *::after {
    box-sizing: border-box;
  }
  /*
  2. Remove default margin
*/
  * {
    margin: 0;
  }
  /*
  Typographic tweaks!
  3. Add accessible line-height
  4. Improve text rendering
*/
  body {
    line-height: 1.5;
    -webkit-font-smoothing: antialiased;
  }
  /*
  5. Improve media defaults
*/
  img,
  picture,
  video,
  canvas,
  svg {
    display: block;
    max-width: 100%;
  }
  /*
  6. Remove built-in form typography styles
*/
  input,
  button,
  textarea,
  select {
    font: inherit;
  }
  /*
  7. Avoid text overflows
*/
  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    overflow-wrap: break-word;
  }
  /*
  8. Create a root stacking context
*/
  #root,
  #__next {
    isolation: isolate;
  }

  :root {
    --yellow-from: hsl(39, 85%, 43%);
    --yellow-to: hsl(40, 84%, 53%);
    --blue-from: hsl(230, 89%, 62%);
    --blue-to: hsl(230, 89%, 65%);
    --red-from: hsl(349, 71%, 52%);
    --red-to: hsl(349, 70%, 56%);
    --purple-from: hsl(261, 73%, 60%);
    --purple-to: hsl(261, 72%, 63%);
    --cyan-from: hsl(189, 59%, 53%);
    --cyan-to: hsl(189, 58%, 57%);
    --radial-gradient-from: hsl(214, 47%, 23%);
    --radial-gradient-to: hsl(237, 49%, 15%);

    --dark-text: hsl(229, 25%, 31%);
    --score-text: hsl(229, 64%, 46%);
    --header-outline: hsl(217, 16%, 45%);

    --radial-gradient: radial-gradient(
      circle at top,
      hsl(214, 47%, 23%),
      hsl(237, 49%, 15%)
    );

    font-family: 'BarlowSemiCondensed-SemiBold', system-ui, -apple-system,
      BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell,
      'Open Sans', 'Helvetica Neue', sans-serif;
    font-size: 18px;
  }

  body {
    position: relative;
    height: 100vh;
    background: var(--radial-gradient);
  }

  #close-button {
    background-image: url(/images/icon-close.svg);
    background-repeat: no-repeat;
    background-size: cover;
  }
</style>

<script>
  const rulesButton = document.getElementById('rules-button');
  const rulesSection = document.getElementById('rules-section');
  const closeButton = document.getElementById('close-button');

  const toggleSection = () => rulesSection?.classList.toggle('hidden');

  rulesButton?.addEventListener('click', toggleSection);

  closeButton?.addEventListener('click', toggleSection);
</script>
